import { RequestHandler } from "express";
import { z } from "zod";
import { GoogleGenerativeAI } from "@google/generative-ai";
import type { AdvisoryRequest, AdvisoryResponse, LangCode } from "@shared/api";

const ReqSchema = z.object({
  question: z.string().optional(),
  imageBase64: z.string().optional(),
  lang: z.custom<LangCode>(),
});

const titles: Record<string, string> = {
  en: "Crop Advisory",
  ml: "р┤Хр╡Гр┤╖р┤┐ р┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤В",
  hi: "рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣",
  mr: "рдкрд┐рдХ рд╕рд▓реНрд▓рд╛",
  kn: "р▓мр│Жр▓│р│Ж р▓╕р▓▓р▓╣р│Ж",
  gu: "рккрк╛ркХ рк╕рк▓рк╛рк╣",
  te: "р░кр░Вр░Я р░╕р░▓р░╣р░╛",
};

const stepsMap: Record<string, string[]> = {
  en: ["Inspect leaves", "Isolate affected area", "Apply organic pesticide", "Control irrigation"],
  ml: ["р┤Зр┤▓р┤Хр╡╛ р┤кр┤░р┤┐р┤╢р╡Лр┤зр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х", "р┤мр┤╛р┤зр┤┐р┤д р┤нр┤╛р┤Чр┤В р┤╡р╡Зр╡╝р┤др┤┐р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х", "р┤Ьр╡Ир┤╡ р┤Хр╡Ар┤Яр┤ир┤╛р┤╢р┤┐р┤ир┤┐ р┤кр╡Нр┤░р┤пр╡Лр┤Чр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х", "р┤╡р╡Жр┤│р╡Нр┤│р┤В р┤ир┤┐р┤пр┤ир╡Нр┤др╡Нр┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х"],
  hi: ["рдкрддреНрддреЛрдВ рдХреА рдЬрд╛рдБрдЪ рдХрд░реЗрдВ", "рд╕рдВрдХреНрд░рдорд┐рдд рднрд╛рдЧ рдЕрд▓рдЧ рдХрд░реЗрдВ", "рдЬреИрд╡рд┐рдХ рдХреАрдЯрдирд╛рд╢рдХ рд▓рдЧрд╛рдПрдБ", "рд╕рд┐рдВрдЪрд╛рдИ рдирд┐рдпрдВрддреНрд░рд┐рдд рдХрд░реЗрдВ"],
  mr: ["рдкрд╛рдиреЗ рддрдкрд╛рд╕рд╛", "рд╕рдВрдХреНрд░рдорд┐рдд рднрд╛рдЧ рд╡реЗрдЧрд│рд╛ рдХрд░рд╛", "рд╕реЗрдВрджреНрд░рд┐рдп рдХреАрдЯрдХрдирд╛рд╢рдХ рд╡рд╛рдкрд░рд╛", "рдкрд╛рдгреА рдирд┐рдпрдВрддреНрд░рд┐рдд рдХрд░рд╛"],
  kn: ["р▓Ор▓▓р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓┐", "р▓кр│Ар▓бр▓┐р▓д р▓нр▓╛р▓Чр▓╡р▓ир│Нр▓ир│Б р▓мр│Зр▓░р│Нр▓кр▓бр▓┐р▓╕р▓┐", "р▓╕р│Зр▓Вр▓жр│Нр▓░р│Ар▓п р▓Хр│Ар▓Яр▓ир▓╛р▓╢р▓Х р▓мр▓│р▓╕р▓┐", "р▓ир│Ар▓░р▓╛р▓╡р▓░р▓┐ р▓ир▓┐р▓пр▓Вр▓др│Нр▓░р▓┐р▓╕р▓┐"],
  gu: ["рккрк╛ркВркжркбрк╛ ркдрккрк╛рк╕рлЛ", "рк╕ркВркХрлНрк░ркорк┐ркд ркнрк╛ркЧ ркЕрк▓ркЧ ркХрк░рлЛ", "рк╕ркЬрлАрк╡ ркХрлАркЯркирк╛рк╢ркХ рк▓ркЧрк╛рк╡рлЛ", "рк╕рк┐ркВркЪрк╛ркИ ркирк┐ркпркВркдрлНрк░рк┐ркд ркХрк░рлЛ"],
  te: ["р░Жр░Хр▒Бр░▓р░ир▒Б р░кр░░р░┐р░╢р▒Ар░▓р░┐р░Вр░Ър░Вр░бр░┐", "р░мр░╛р░зр░┐р░д р░нр░╛р░Чр░╛р░ир▒Нр░ир░┐ р░╡р▒Зр░░р▒Бр░Ър▒Зр░пр░Вр░бя┐╜я┐╜я┐╜", "р░╕р▒Зр░Вр░жр▒Нр░░р▒Ар░п р░кр▒Бр░░р▒Бр░Чр▒Бр░ор░Вр░жр▒Б р░╡р░╛р░бр░Вр░бр░┐", "р░кр░╛р░░р▒Бр░жр░▓ р░ир░┐р░пр░Вр░др▒Нр░░р░┐р░Вр░Ър░Вр░бр░┐"],
};

const intro: Record<string, string> = {
  en: "Here are personalized steps for your crop.",
  ml: "р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╡р┤┐р┤│р┤пр╡Нр┤Хр╡Нр┤Хр╡Н р┤Жр┤╡р┤╢р╡Нр┤пр┤ор┤╛р┤п р┤╕р┤╣р┤╛р┤п р┤ир┤┐р╡╝р┤жр╡Нр┤жр╡Зр┤╢р┤Щр╡Нр┤Щр╡╛ р┤др┤╛р┤┤р╡Ж р┤ир╡╜р┤Хр┤┐р┤пр┤┐р┤░р┤┐р┤Хр╡Нр┤Хр╡Бр┤ир╡Нр┤ир╡Б.",
  hi: "рдЖрдкрдХреА рдлрд╕рд▓ рдХреЗ рд▓рд┐рдП рдЖрд╡рд╢реНрдпрдХ рд╕рд▓рд╛рд╣ рдиреАрдЪреЗ рджреА рдЧрдИ рд╣реИред",
  mr: "рддреБрдордЪреНрдпрд╛ рдкрд┐рдХрд╛рд╕рд╛рдареА рдЖрд╡рд╢реНрдпрдХ рдкрд╛рдпрд▒реНрдпрд╛ рдЦрд╛рд▓реА рджрд┐рд▓реЗрд▓реНрдпрд╛ рдЖрд╣реЗрдд.",
  kn: "р▓ир▓┐р▓ор│Нр▓о р▓мр│Жр▓│р│Жр▓Чр▓╛р▓Чр▓┐ р▓╡р│Ир▓пр▓Хр│Нр▓др▓┐р▓Х р▓╣р▓Вр▓др▓Чр▓│р│Б р▓Хр│Жр▓│р▓Чр│Ж р▓ир│Ар▓бр▓▓р▓╛р▓Чр▓┐р▓жр│Ж.",
  gu: "ркдркорк╛рк░рлА рккрк╛ркХ ркорк╛ркЯрлЗ рк╡рлНркпркХрлНркдрк┐ркЧркд рккркЧрк▓рк╛ркВ ркирлАркЪрлЗ ркЖрккрлЗрк▓ ркЫрлЗ.",
  te: "р░ор▒А р░кр░Вр░Я р░Хр▒Лр░╕р░В р░╕р▒Вр░Ър░ир░▓р▒Б р░Хр▒Нр░░р░┐р░Вр░ж р░Йр░ир▒Нр░ир░╛р░пр░┐.",
};

export const postAdvisory: RequestHandler = async (req, res) => {
  const parsed = ReqSchema.safeParse(req.body as AdvisoryRequest);
  if (!parsed.success) return res.status(400).json({ error: parsed.error.flatten() });
  const { question = "", lang, imageBase64 } = parsed.data;

  // Basic image size validation (~4/3 of bytes to base64 length). Limit ~5MB.
  if (imageBase64) {
    const approxBytes = Math.ceil((imageBase64.length * 3) / 4);
    if (approxBytes > 5 * 1024 * 1024) {
      return res.status(413).json({ error: "Image too large (max 5MB)" });
    }
  }

  const safeQuestion = String(question).slice(0, 2000);
  const useAI = !!process.env.AI_API_KEY;

  let response: AdvisoryResponse;
  if (useAI) {
    try {
      // Initialize Google Gemini AI with configuration
      const genAI = new GoogleGenerativeAI(process.env.AI_API_KEY!);
      const model = genAI.getGenerativeModel({ 
        model: "gemini-2.0-flash-exp", // Use the most reliable available model
        generationConfig: {
          temperature: 0.8, // Slightly higher for more engaging responses
          maxOutputTokens: 3000, // Increased for detailed structured content
        },
      });

      // Create detailed and engaging prompt for comprehensive agricultural advice
      // Create detailed and engaging prompt for comprehensive agricultural advice
      const systemPrompt = `You are Dr. Krishi, an Indian agricultural expert helping farmers with all agricultural questions.

CRITICAL: You MUST respond with ONLY valid JSON. No text before or after. Start with { and end with }.

Read the farmer's question carefully and provide relevant advice. Questions can be about:
- Which crops to grow in specific regions/states/districts
- Pest/disease problems and treatments  
- Farming techniques and best practices
- Seasonal planning and crop selection
- Soil management and fertilization
- Market prices and crop economics
- Any other agricultural topic

JSON format required:
{
  "title": "ЁЯМ▒ [Title matching the question topic]", 
  "text": "**[Content that directly answers the farmer's question with bold headings, practical advice, and costs in тВ╣]**",
  "steps": ["ЁЯФН Step 1", "ЁЯТз Step 2", "ЁЯСА Step 3", "ЁЯЫбя╕П Step 4"],
  "lang": "${lang}",
  "source": "ai"
}

CONTENT GUIDELINES:
тЬЕ READ the actual question and answer it specifically
тЬЕ Use **bold** for headings and key points
тЬЕ Include emojis: ЁЯМ▒ЁЯМ╛ЁЯРЫЁЯТзЁЯФНЁЯСитАНЁЯМ╛ЁЯТбтЪая╕ПтЬиЁЯЫбя╕ПЁЯТк
тЬЕ Keep conversational and supportive tone  
тЬЕ Include costs in тВ╣ when relevant
тЬЕ Provide practical, actionable advice

EXAMPLE RESPONSES:
- "crops grown in Kerala" тЖТ List major crops like rice, coconut, spices, rubber with growing conditions
- "pest problem on tomato" тЖТ Identify pest, provide organic treatments with costs
- "best time to plant wheat" тЖТ Seasonal timing, variety recommendations, preparation steps

IMPORTANT: Answer the ACTUAL question asked. Don't default to pest advice unless the question is about pests.



CONTENT STRUCTURE for "text" field (300-500 words max):
**ЁЯФН Problem:** Identify the issue and reassure it's fixable
**ЁЯТб Cause:** Explain why this happens simply  
**ЁЯЫая╕П Solutions:** List 2-3 organic treatments with quantities and costs
**ЁЯСА Monitoring:** What to watch for in next 3-7 days
**ЁЯЫбя╕П Prevention:** Future protection tips
**ЁЯТк Encouragement:** Positive, supportive closing

WRITING STYLE: Warm, personal, simple language, practical tips

STEPS field (4 steps, each 15-30 words):
ЁЯФН Start with emoji + specific action + timing
я┐╜ Include quantities and materials (neem, turmeric, etc.)
я┐╜ Mention monitoring frequency and signs
я┐╜я╕П End with prevention tip

REMEMBER: Output ONLY valid JSON. No extra text, explanations, or markdown formatting outside the JSON structure.`;

      let prompt = systemPrompt + `

FARMER'S QUESTION: "${safeQuestion}"

CONTEXT: Indian agriculture, post-monsoon season, budget under тВ╣500, prefer organic solutions.

RESPOND WITH ONLY JSON - NO EXPLANATIONS OR EXTRA TEXT:`;

      
      // Create a timeout promise for AI requests (25 seconds for detailed responses)
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('AI request timeout')), 25000);
      });
      
      // Handle image if provided
      let aiPromise: Promise<any>;
      if (imageBase64) {
        // Remove data URL prefix if present
        const base64Data = imageBase64.replace(/^data:image\/[a-z]+;base64,/, '');
        aiPromise = model.generateContent([
          { text: prompt + `

ЁЯУ╕ **IMAGE ANALYSIS REQUIRED:**
The farmer has uploaded an image of their crop/farm. Please provide detailed visual analysis:

**ЁЯФН Visual Assessment:**
тАв Identify the crop type and growth stage
тАв Note leaf color, texture, and any discoloration patterns
тАв Look for pest damage, disease symptoms, or nutrient deficiencies
тАв Assess soil condition visible in image
тАв Check plant spacing, overall health, and environmental conditions

**ЁЯТб Image-Specific Insights:**
тАв Describe exactly what you observe in the image
тАв Correlate visual symptoms with possible causes
тАв Provide image-based evidence for your recommendations
тАв Include stage-specific advice based on plant growth visible

**ЁЯОп Targeted Solutions:**
Combine your visual analysis with the farmer's question to provide laser-focused, image-specific advice in your detailed JSON response. Be specific about what you see and how it relates to the solution.` },
          {
            inlineData: {
              mimeType: "image/jpeg",
              data: base64Data
            }
          } as any
        ]);
      } else {
        aiPromise = model.generateContent([{ text: prompt }]);
      }

      // Race between AI request and timeout
      let aiResult;
      try {
        aiResult = await Promise.race([aiPromise, timeoutPromise]) as any;
      } catch (error: any) {
        // If we get a 404 model not found error, try fallback models
        if (error.status === 404 && error.message?.includes('not found')) {
          console.log('Model not found, trying fallback model...');
          const fallbackModel = genAI.getGenerativeModel({ 
            model: "gemini-2.0-flash",
            generationConfig: {
              temperature: 0.8,
              maxOutputTokens: 2500,
            },
          });
          
          if (imageBase64) {
            const base64Data = imageBase64.replace(/^data:image\/[a-z]+;base64,/, '');
            aiResult = await fallbackModel.generateContent([
              { text: prompt + `\n\nIMAGE ANALYSIS REQUIRED: Please analyze the uploaded image and provide specific advice based on what you observe.` },
              {
                inlineData: {
                  mimeType: "image/jpeg",
                  data: base64Data
                }
              } as any
            ]);
          } else {
            aiResult = await fallbackModel.generateContent([{ text: prompt }]);
          }
        } else {
          throw error; // Re-throw if it's not a model availability issue
        }
      }
      
      let aiResponse = aiResult.response.text();
      
      console.log('=== AI RESPONSE DEBUG ===');
      console.log('Length:', aiResponse.length);
      console.log('Starts with {:', aiResponse.trim().startsWith('{'));
      console.log('Ends with }:', aiResponse.trim().endsWith('}'));
      console.log('Preview:', aiResponse.substring(0, 300));
      console.log('========================');
      
      // Multiple strategies to extract valid JSON
      let parsedResponse = null;
      
      // Strategy 1: Try parsing as-is (if AI returned clean JSON)
      try {
        parsedResponse = JSON.parse(aiResponse.trim());
        console.log('тЬЕ Direct JSON parse successful');
      } catch (e1) {
        console.log('Direct parse failed, trying cleanup...');
        
        // Strategy 2: Remove markdown and extra text
        let cleanedResponse = aiResponse
          .replace(/```json\s*/g, '')
          .replace(/```\s*/g, '')
          .replace(/^[^{]*({.*})[^}]*$/s, '$1')
          .trim();
        
        try {
          parsedResponse = JSON.parse(cleanedResponse);
          console.log('тЬЕ Cleaned JSON parse successful');
        } catch (e2) {
          console.log('Cleaned parse failed, trying extraction...');
          
          // Strategy 3: Extract JSON object more aggressively
          const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
          if (jsonMatch) {
            try {
              parsedResponse = JSON.parse(jsonMatch[0]);
              console.log('тЬЕ Extracted JSON parse successful');
            } catch (e3) {
              console.log('All JSON parsing strategies failed');
            }
          }
        }
      }
      
      // If we successfully parsed JSON, validate and use it
      if (parsedResponse && parsedResponse.title && parsedResponse.text && parsedResponse.steps && Array.isArray(parsedResponse.steps)) {
        response = {
          title: parsedResponse.title,
          text: parsedResponse.text,
          steps: parsedResponse.steps,
          lang,
          source: "ai",
        };
        console.log('тЬЕ Using complete AI response');
      } else if (parsedResponse) {
        // Partial parsing success - fill in missing fields
        console.log('тЪая╕П AI response missing some fields, using hybrid approach');
        response = {
          title: parsedResponse.title || titles[lang] || titles.en,
          text: parsedResponse.text || `${safeQuestion ? `Question: ${safeQuestion}. ` : ""}${intro[lang] || intro.en}`,
          steps: Array.isArray(parsedResponse.steps) && parsedResponse.steps.length > 0 ? parsedResponse.steps : stepsMap[lang] || stepsMap.en,
          lang,
          source: "ai",
        };
      } else {
        // Complete parsing failure - return error
        console.log('тЭМ Failed to parse AI response as JSON');
        return res.status(503).json({
          error: 'AI service returned invalid response format. Please try again.',
          code: 'AI_PARSE_ERROR'
        });
      }
    } catch (error) {
      console.error('AI generation failed:', error);
      // Return error instead of template response
      return res.status(503).json({
        error: 'Service temporarily unavailable. Our AI advisory service is currently experiencing technical difficulties. Please try again in a few minutes.',
        code: 'AI_SERVICE_ERROR'
      });
    }
  } else {
    // No AI API key configured, return error
    return res.status(503).json({
      error: 'Service configuration error. AI advisory service is not properly configured. Please contact support.',
      code: 'AI_CONFIG_ERROR'
    });
  }
  
  console.log('Final response:', response); // Debug log
  return res.json(response);
};